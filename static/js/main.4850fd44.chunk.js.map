{"version":3,"sources":["components/Cell/index.js","components/CellBox/index.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","className","class","id","onClick","e","handleClick","onKeyDown","event","keyPressDown","role","tabIndex","CellBox","componentDidMount","changeInterval","console","log","state","clicked","setState","currentBoxID","items","changeSingleProperty","key","value","map","item","newItem","changeColors","randomState","changeTwoProperties","value1","value2","ID1","ID2","movePlus","direction","moveMinus","keyCode","setInterval","createCells","cells","i","push","Math","random","this","React","Component","Content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4850fd44.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './index.css';\r\n\r\n\r\n\r\nconst Cell = (props) => {\r\n  //console.log(props)\r\n  return (\r\n    <div className={props.class} id={props.id} onClick={e => props.handleClick(e, props.id, props.class)} onKeyDown={event => props.keyPressDown(event)} role=\"button\" tabIndex=\"0\">\r\n        {/*props.id*/}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import React from 'react';\r\n\r\nimport Cell from '../Cell';\r\nimport './index.css';\r\n\r\nclass CellBox extends React.Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: this.createCells(),\r\n            clicked: false,\r\n            currentBoxID: 0\r\n        }\r\n\r\n       \r\n    }\r\n    \r\n    componentDidMount = () => { // This is the random color changer, can be called from here\r\n         this.changeInterval();\r\n    }\r\n\r\n    handleClick = (e, id, className) => {\r\n        console.log(`e: ${e}, id: ${id}, class: ${className}`);\r\n        if(this.state.clicked === false) {\r\n            this.setState({clicked: true, currentBoxID: id, items: this.changeSingleProperty(\"class\", \"player\", id )})            \r\n        }\r\n        console.log(`current selected box is ${this.state.currentBoxID}`)\r\n    }\r\n\r\n    changeSingleProperty = (key, value, id) => {\r\n        const newItems = [...this.state.items].map(item => {\r\n            if (item.id === id ) {\r\n                const newItem = {...item};\r\n                newItem[key] = value\r\n                return newItem;\r\n            }\r\n            return item\r\n        })\r\n        return newItems\r\n    }\r\n\r\n    changeColors = (id) => {\r\n        const newItems = [...this.state.items].map(item =>{ \r\n            if(item.id === id) {\r\n                const newItem = {...item};\r\n                newItem.class = `player`\r\n                return newItem;\r\n            } else if (item.id !== id){\r\n                const newItem = {...item};\r\n                newItem.class = `cell ${this.randomState()}`\r\n                return newItem;\r\n            }\r\n            return item\r\n            \r\n        })\r\n        return newItems\r\n    }\r\n\r\n    changeTwoProperties = (key, value1, value2, ID1, ID2) => {\r\n        const newItems = [...this.state.items].map(item => {\r\n            if (item.id === ID1 ) {\r\n                const newItem = {...item};\r\n                newItem[key] = value1\r\n                return newItem;\r\n            }\r\n            if (item.id === ID2 ) {\r\n                const newItem = {...item};\r\n                newItem[key] = value2\r\n                return newItem;\r\n            }\r\n            return item\r\n        })\r\n        return newItems\r\n    }\r\n    \r\n    movePlus = (direction) => {\r\n        this.setState({items: this.changeTwoProperties(\"class\", \"cell not-active\", \"player\", `${this.state.currentBoxID}`, `${this.state.currentBoxID+direction}`), currentBoxID: this.state.currentBoxID+direction})\r\n    }\r\n    moveMinus = (direction) => {\r\n        this.setState({items: this.changeTwoProperties(\"class\", \"cell not-active\", \"player\", `${this.state.currentBoxID}`, `${this.state.currentBoxID-direction}`), currentBoxID: this.state.currentBoxID-direction})\r\n    }\r\n\r\n    keyPressDown = (event) => {\r\n        if (event.keyCode === 87) {\r\n            console.log(`you pressed W`)\r\n            if (this.state.currentBoxID === 1 || this.state.currentBoxID === 2 || this.state.currentBoxID === 3 || this.state.currentBoxID === 4 || this.state.currentBoxID === 5) {\r\n                this.movePlus(20)\r\n            } else {\r\n                this.moveMinus(5)\r\n            }\r\n        } else if (event.keyCode === 83) {\r\n            console.log(`you pressed S`)\r\n            if (this.state.currentBoxID === 21 || this.state.currentBoxID === 22 || this.state.currentBoxID === 23 || this.state.currentBoxID === 24 || this.state.currentBoxID === 25) {\r\n                this.moveMinus(20)\r\n            } else {\r\n                this.movePlus(5)\r\n            }\r\n        } \r\n        \r\n        else if (event.keyCode === 65) {\r\n            console.log(`you pressed A`)\r\n            if (this.state.currentBoxID === 21 || this.state.currentBoxID === 16 || this.state.currentBoxID === 11 || this.state.currentBoxID === 6 || this.state.currentBoxID === 1) {\r\n                this.movePlus(4)\r\n            } else {\r\n                this.moveMinus(1)\r\n            }\r\n        } \r\n        \r\n        else if (event.keyCode === 68) {\r\n            console.log(`you pressed D`)\r\n            if (this.state.currentBoxID === 25 || this.state.currentBoxID === 20 || this.state.currentBoxID === 15 || this.state.currentBoxID === 10 || this.state.currentBoxID === 5) {\r\n                this.moveMinus(4)\r\n            } else {\r\n                this.movePlus(1)\r\n            }\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    changeInterval = () => {\r\n         setInterval(() => {\r\n             this.setState({items: this.changeColors(`${this.state.currentBoxID}`)})\r\n        }, 500);\r\n    }\r\n\r\n\r\n    \r\n    createCells = () => {\r\n        const cells = [];\r\n        for (let i = 1 ; i <= 25 ; i++) {\r\n          cells.push({id : `${i}`, class: `cell not-active`})\r\n        }\r\n        return cells\r\n    }\r\n    \r\n    randomState = () => {\r\n        return (Math.random() > 0.5) ? \"active\" : \"not-active\"\r\n    }\r\n    \r\n    render() {\r\n    \r\n    return (\r\n    \r\n      <div className=\"CellBox-Container\" >\r\n        \r\n        {this.state.items.map((item) => {\r\n          return <Cell key={item.id} class={item.class} id={item.id} handleClick={this.handleClick} keyPressDown={this.keyPressDown} />;\r\n        })}\r\n\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CellBox;\r\n","import React from 'react';\r\n\r\nimport CellBox from '../CellBox';\r\nimport './index.css';\r\n\r\nclass Content extends React.Component {\r\n    \r\n  render() {\r\n    \r\n    return (\r\n    \r\n      <div className=\"Content-Container\">\r\n        <CellBox />\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;","import React from 'react';\n\nimport './App.css';\n\nimport Content from './components/Content';\n\n\n\nclass App extends React.Component {\n\n\n  render() {\n\n    return (\n      <div className=\"App\">\n        <h1>Dance Floor!</h1>\n        <Content />\n        <h2>Click on a box and start your journey!</h2>\n      </div>\n      \n      \n    )\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}